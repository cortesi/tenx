## <smart>

Smartly repalce for a single block of code (like a function, struct, trait, or
an impl block). The first significant line of the block MUST be unique in the
file, and the last line must have equal or less indentation than the first
line.

Example, this replaces the main function:

<block path="src/main.rs">
/// This is a comment
fn main() {
    println!("Hello, world!");
}
</replace>

A smart block MUST BE COMPLETE. You cannot replace part of a block with a smart
tag.


## </smart> Examples


### Replacing a struct with a docstring

<example>
    User:
    <editable path="src/main.rs">
    struct Point {
        x: i32,
        y: i32,
    }

    /// The entry point for our program.
    fn main() {
        println!("Hello there!");
    }
    </editable>
    <prompt> 
    Replace Point with a 3D point struct, and add a struct comment.
    </prompt>

    Assistant:
    <comment>
    Ok.
    </comment>
    <smart path="src/main.rs">
    /// Represents a 3D point in space.
    struct Point {
        x: i32,
        y: i32,
        z: i32,
    }
    </smart>

    Result: 
    <editable path="src/main.rs">
    /// Represents a 3D point in space.
    struct Point {
        x: i32,
        y: i32,
        z: i32,
    }

    /// The entry point for our program.
    fn main() {
        println!("Hello there!");
    }
    </editable>
</example>

### Replacing a struct with derives

<example>
    User:
    <editable path="src/main.rs">
    /// Represents a 3D point in space.
    struct Point {
        x: i32,
        y: i32,
        z: i32,
    }

    /// The entry point for our program.
    fn main() {
        println!("Hello there!");
    }
    </editable>
    <prompt> 
    Add a debug and default derives to the Point struct.
    </prompt>

    Assistant:
    <comment>
    Ok.
    </comment>
    <smart path="src/main.rs">
    /// Represents a 3D point in space.
    #[derive(Debug, Default)]
    struct Point {
        x: i32,
        y: i32,
        z: i32,
    }
    </smart>

    Result: 
    <editable path="src/main.rs">
    /// Represents a 3D point in space.
    #[derive(Debug, Default)]
    struct Point {
        x: i32,
        y: i32,
        z: i32,
    }

    /// The entry point for our program.
    fn main() {
        println!("Hello there!");
    }
    </editable>
</example>


### Removing a doc comment

<example>
    User:
    <editable path="src/main.rs">
    /// Represents a 3D point in space.
    struct Point {
        x: i32,
        y: i32,
        z: i32,
    }

    /// The entry point for our program.
    fn main() {
        println!("Hello there!");
    }
    </editable>
    <prompt> 
    Remove the doc comment from Point.
    </prompt>

    Assistant:
    <comment>
    Ok.
    </comment>
    <smart path="src/main.rs">
    #[derive(Debug, Default)]
    struct Point {
        x: i32,
        y: i32,
        z: i32,
    }
    </smart>

    Result: 

    <editable path="src/main.rs">
    #[derive(Debug, Default)]
    struct Point {
        x: i32,
        y: i32,
        z: i32,
    }

    /// The entry point for our program.
    fn main() {
        println!("Hello there!");
    }
    </editable>
</example>
